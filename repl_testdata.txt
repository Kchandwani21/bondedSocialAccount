const { fromAscii,toBN } = require('ethjs');
const BigNumber = require('bignumber.js');
const providerTitle = fromAscii("test");
const providerPublicKey = 111;
const ZapCurveType = 'ZapCurveLinear';
const curveStart = 1;
const curveMultiplier = 1;
const param1 = new String("p1");
const param2 = new String("p2");
const params = [fromAscii(param1.valueOf()), fromAscii(param2.valueOf())];
const specifier = "test-linear-specifier";
const oracleEndpoint = fromAscii(specifier.valueOf());
const gasTransaction = toBN(3000000);
const tokensForOwner = new BigNumber("1e30");
const tokensForOracle = new BigNumber('1e24');
const allocateAccount = 300000;

let r; Registry.deployed().then(i=>{r=i;});
r.initiateProvider(providerPublicKey, providerTitle, oracleEndpoint, params, {from:web3.eth.accounts[0], gas:6000000});

let success;r.initiateProviderCurve(oracleEndpoint,1,1,1,{from:web3.eth.accounts[0]}).then(i=>{res=i});

let t; TheToken.deployed().then(i=>{t=i;});
t.allocate(web3.eth.accounts[0], web3.toBigNumber(10).pow(web3.toBigNumber(30)));
t.balanceOf(web3.eth.accounts[0]).then(n=>{console.log(n.toNumber())});

let b;Bondage.deployed().then(i=>{b=i});

let num; t.decimals().then(i=>{num=i});
let a1 = web3.toBigNumber(1000).pow(num)

t.approve(b.address, a1).then(i=>{res=i});

let np;r.getNextProvider(0,{from:web3.eth.accounts[0]}).then(i=>{ np=i});

b.bond(np[1],oracleEndpoint,1,{from:web3.eth.accounts[0]}).then(p=>{res=p});

